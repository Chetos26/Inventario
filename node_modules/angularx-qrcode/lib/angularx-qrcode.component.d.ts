import { ElementRef, EventEmitter, OnChanges, Renderer2 } from "@angular/core";
import { DomSanitizer, SafeUrl } from "@angular/platform-browser";
import { QRCodeErrorCorrectionLevel } from "qrcode";
import { QRCodeVersion, QRCodeElementType } from "./types";
import * as i0 from "@angular/core";
export declare class QRCodeComponent implements OnChanges {
    private renderer;
    private sanitizer;
    allowEmptyString: boolean;
    colorDark: string;
    colorLight: string;
    cssClass: string;
    elementType: QRCodeElementType;
    errorCorrectionLevel: QRCodeErrorCorrectionLevel;
    imageSrc?: string;
    imageHeight?: number;
    imageWidth?: number;
    margin: number;
    qrdata: string;
    scale: number;
    version?: QRCodeVersion;
    width: number;
    alt?: string;
    ariaLabel?: string;
    title?: string;
    qrCodeURL: EventEmitter<SafeUrl>;
    qrcElement: ElementRef;
    context: CanvasRenderingContext2D | null;
    private centerImage?;
    constructor(renderer: Renderer2, sanitizer: DomSanitizer);
    ngOnChanges(): Promise<void>;
    protected isValidQrCodeText(data: string | null): boolean;
    private toDataURL;
    private toCanvas;
    private toSVG;
    private renderElement;
    private createQRCode;
    emitQRCodeURL(element: HTMLCanvasElement | HTMLImageElement | SVGSVGElement): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<QRCodeComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<QRCodeComponent, "qrcode", never, { "allowEmptyString": { "alias": "allowEmptyString"; "required": false; }; "colorDark": { "alias": "colorDark"; "required": false; }; "colorLight": { "alias": "colorLight"; "required": false; }; "cssClass": { "alias": "cssClass"; "required": false; }; "elementType": { "alias": "elementType"; "required": false; }; "errorCorrectionLevel": { "alias": "errorCorrectionLevel"; "required": false; }; "imageSrc": { "alias": "imageSrc"; "required": false; }; "imageHeight": { "alias": "imageHeight"; "required": false; }; "imageWidth": { "alias": "imageWidth"; "required": false; }; "margin": { "alias": "margin"; "required": false; }; "qrdata": { "alias": "qrdata"; "required": false; }; "scale": { "alias": "scale"; "required": false; }; "version": { "alias": "version"; "required": false; }; "width": { "alias": "width"; "required": false; }; "alt": { "alias": "alt"; "required": false; }; "ariaLabel": { "alias": "ariaLabel"; "required": false; }; "title": { "alias": "title"; "required": false; }; }, { "qrCodeURL": "qrCodeURL"; }, never, never, false, never>;
}
